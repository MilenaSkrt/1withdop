// Класс, представляющий динамический массив
// Конструктор и методы для добавления, изменения, удаления элементов массива
// А также для вывода его содержимого на экран

using System;

namespace laba1
{
    public class ArrayList
    {
        private int[] buffer; // буфер для хранения элементов массива
        private int count; // текущее количество элементов в массиве
        private int capacity; // текущая емкость массива

        public ArrayList() // конструктор класса
        {
            capacity = 5; // начальная емкость массива
            buffer = new int[capacity]; // выделение памяти для массива
            count = 0; // изначальное количество элементов равно 0
        }

        public void Add(int item) // метод для добавления элемента в массив
        {
            if (count == buffer.Length) // если количество элементов равно текущей емкости массива, то
            {
                ResizeArray(); // увеличиваем емкость массива
            }
            buffer[count++] = item; // добавляем элемент в массив
        }

        public void ResizeArray() // метод для увеличения емкости массива вдвое
        {
            int newSize = buffer.Length * 2; // новая емкость равна удвоенной текущей
            int[] newArray = new int[newSize]; // создаем новый массив заданного размера
            Array.Copy(buffer, newArray, buffer.Length); // копируем элементы из старого массива в новый
            buffer = newArray; // присваиваем переменной buffer ссылку на новый массив
        }

        public void Insert(int item, int index) // метод для вставки элемента по указанному индексу
        {
            if (index < 0 || index > count) return; // если индекс некорректный, то выходим из метода

            if (count == buffer.Length) // если количество элементов равно текущей емкости массива, то
            {
                ResizeArray(); // увеличиваем емкость массива
            }

            for (int i = count; i > index; i--) // сдвигаем элементы массива для освобождения места под новый элемент
            {
                buffer[i] = buffer[i - 1];
            }

            buffer[index] = item; // вставляем новый элемент по указанному индексу
            count++; // увеличиваем количество элементов в массиве
        }

        public void Delete(int index) // метод для удаления элемента по указанному индексу
        {
            if (index < 0 || index >= count) return; // если индекс некорректный, то выходим из метода

            for (int i = index; i < count - 1; i++) // сдвигаем элементы массива для удаления указанного элемента
            {
                buffer[i] = buffer[i + 1];
            }

            count--; // уменьшаем количество элементов в массиве
        }

        public void Clear() // метод для полной очистки массива
        {
            buffer = new int[capacity]; // создаем новый массив с изначальной емкостью
            count = 0; // обнуляем количество элементов
        }

        public int Count // свойство для получения текущего количества элементов в массиве
        {
            get { return count; }
        }

        public int this[int index] // индексатор для доступа к элементам массива по индексу
        {
            get
            {
                if (index < 0 || index >= count) // если индекс некорректный, то возвращаем 0
                {
                    return 0;
                }
                return buffer[index]; // возвращаем элемент по указанному индексу
            }

            set
            {
                if (index >= 0 && index < count) // если индекс корректный
                {
                    buffer[index] = value; // присваиваем элементу по индексу новое значение
                }
            }
        }

        public void Print() // метод для вывода содержимого массива на экран
        {
            for (int i = 0; i < count; i++) // перебираем элементы массива
            {
                Console.Write(buffer[i] + " "); // выводим элемент на экран с пробелом
            }
            Console.WriteLine(); // выводим пустую строку для отделения выводов
        }
    }
}
